
    

networks:
  core-net:          # <-- single custom bridge
    driver: bridge
  

services:
  # ────────────────────────────────────────────────────────────────────────────────
  # 1) The Kafka broker itself, with a healthcheck on its API versions endpoint
  kafka:
    networks: [core-net]
    logging:
      driver: "none"
    cpu_quota: -1  
    image: apache/kafka:3.7.0
    hostname:     kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_PROCESS_ROLES:                     "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS:          "1@kafka:9093"
      KAFKA_LISTENERS:                         "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:    "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES:         "CONTROLLER"
      KAFKA_NODE_ID:                           "1"
      KAFKA_ADVERTISED_LISTENERS:              "PLAINTEXT://kafka:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_SOCKET_SEND_BUFFER_BYTES: "1024000"
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: "1024000"
      KAFKA_SOCKET_REQUEST_MAX_BYTES: "104857600"
      KAFKA_NUM_NETWORK_THREADS: "4"      # = number of host NIC queues or CPUs
      KAFKA_NUM_IO_THREADS:      "4"      # = disks or CPUs; try 8 on NVMe
      KAFKA_LOG_CLEANER_THREADS: "2"
      


    healthcheck:
      # broker will report its supported API versions if fully ready
      test: ["CMD", "sh", "-c", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092 > /dev/null"]
      interval:   10s
      timeout:    10s
      retries:    5
      start_period: 20s

  # ────────────────────────────────────────────────────────────────────────────────
  # 2) One-time init job to create topics—only marked healthy once both exist
  kafka-init:
    cpu_quota: -1
    logging:
      driver: "none"  
    networks: [core-net]
    image: apache/kafka:4.0.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint:
      - sh
      - -c
      - |
        echo "⏳ waiting for kafka…" >&2
        until /opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092 > /dev/null; do sleep 2; done
        echo "✅ creating topics…" >&2
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 \
          --create --if-not-exists --topic orders        --partitions 1 --replication-factor 1
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 \
          --create --if-not-exists --topic notifications --partitions 1 --replication-factor 1
        echo "🎉 topics ready" >&2
        # now hang so the container stays alive for its healthcheck…
        tail -f /dev/null

    healthcheck:
      # Only pass once both topics show up in the list
      test: ["CMD", "sh", "-c", '/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list | grep -E "orders|notifications"']
      interval:     5s
      timeout:      5s
      retries:      5
      start_period: 10s

  # ────────────────────────────────────────────────────────────────────────────────
  # 3) Matching Engine must wait for kafka-init → healthy
  matching-engine:
    logging:
      driver: "none"
    cpu_quota: -1  
    networks: [core-net]
    build: ./MatchingEngine
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_healthy
    environment:
      KAFKA_BROKER:    kafka:9092
      ORDERS_TOPIC:    orders
      NOTIFS_TOPIC:    notifications
      MULTICAST_ADDR:  239.255.0.1
      MULTICAST_PORT:  "30001"

  # ────────────────────────────────────────────────────────────────────────────────
  # 4) REST gateway also waits on topics
  rest-server:
    logging:
      driver: "none"
    cpu_quota: -1  
    networks: [core-net]
    build: ./RestServer
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKER: kafka:9092
      ORDERS_TOPIC: orders

  # ────────────────────────────────────────────────────────────────────────────────
  # 5) TCP gateway same story
  socket-server:
    logging:
      driver: "none"
    cpu_quota: -1  
    networks: [core-net]
    build: ./SocketServer
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER: kafka:9092
      ORDERS_TOPIC: orders

  # ────────────────────────────────────────────────────────────────────────────────
  # 6) Notification service
  notification-service:
    logging:
      driver: "none"
    cpu_quota: -1  
    networks: [core-net]
    build: ./NotificationService
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_healthy
    ports:
      - "8090:8090"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      NOTIFICATIONS_TOPIC:             notifications
